---
title: "Vectors and Linear Combinations"
author: "CDS DS-121<br>Boston University"
format: 
    revealjs:
        css: 
        - styles.css
---

## Learning Objectives
<!-- Is it better to increment bullets one by one? Or is it better to reveal them together so it is easier to present? -->
::::{style="font-size: .8em"}
Today we will talk about vectors.

We will discuss why we need vectors in the first place. We will look at vectors from three perspectives:

:::{.fragment}
- Algebraic
- Geometric
- Computational
:::

:::{.fragment}
In addition, we will discuss how to compare and combine vectors.
:::
::::
## Why Vectors?
:::::{.columns}
::::{.column width=50%"}
![](/images/lecture_2/oranges_apples.jpg)

:::{.center-text style="font-size: .8em"}
"You can't add apples and oranges."
:::
::::
::::{.column width="50%"}

:::{style="font-size: .8em;"}

_Two_ seperate numbers $v_1$ and $v_2$ form a _two-dimensional_ vector:

:::{.center-text}

:::{style="font-size: 1.2em;"}
$$
\begin{bmatrix} \mathit{v_1} \\ \mathit{v_2} \end{bmatrix}.
$$
:::
:::
:::
::::
:::::

<!-- :::{.text-center}
You can't add apples and oranges
::: -->

## Algebraic Representation
::::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return """
    <div class="purple-box">
        <p>A list of real numbers with only one column is called a <b>column vector</b>, or simply a <b>vector</b>.
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```

<!-- Fun way to get a half line break : ) -->
<div style="margin-bottom: 0.5em;"> </div> 

:::{.fragment}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p>The set of all vectors with \( d \) entries is denoted by \( \mathbb{R}^d\).
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::
::::{.fragment}
Examples of vectors in $\mathbb{R}^2$:<br>

:::{.center-text style="font-size: 0.8em"}
$\bf{a}=\begin{bmatrix}3 \\ -1\end{bmatrix}$,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$\bf{b}=\begin{bmatrix}.2 \\ .3\end{bmatrix}$,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$\bf{c}=\begin{bmatrix}w_1 \\ w_2\end{bmatrix}$.
:::
::::
::::
## Algebraic Representation

:::{style="font-size: .8em;"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>How do vectors in \( \mathbb{R}^3\) look like?
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::
::::{.fragment}
:::{style="font-size: .8em;"}
Examples of vectors in $\mathbb{R}^3$:
:::

:::{.center-text style="font-size: .6em;"}
**$\bf{d}=\begin{bmatrix}2 \\ 3 \\ 4\end{bmatrix}$,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$\bf{e}=\begin{bmatrix}-1 \\ 0 \\ 2\end{bmatrix}$,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$\bf{f}=\begin{bmatrix}w_1 \\ w_2 \\ w_3\end{bmatrix}.$**
:::
::::
:::{.fragment style="font-size: .8em;"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>Are \(\small \begin{bmatrix}2 & 3 & 4\end{bmatrix}\) and \(\small \begin{bmatrix}2 \\ 3 \\ 4\end{bmatrix}\) the same vector?
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::

## Geometric Representation
::::{style="font-size: .8em"}
Geometrically, an ordered sequence of $d$ numbers can be thought of as a point in $\mathbb{R}^d$.<br>

::::{.fragment}
Both $\tiny \begin{bmatrix} -2 \\ -1 \end{bmatrix}$ and $\small \begin{bmatrix} -2 & -1 \end{bmatrix}$ can be viewed as a point on a plane.

:::{.center-text}
```{python}
import laUtilities as ut

ax = ut.plotSetup(size=(8,4))
ut.centerAxes(ax)
ut.plotPoint(ax, -2, -1)
ut.plotPoint(ax, 2, 2)
ut.plotPoint(ax, 3, -1)
ax.plot(0, -2, '')
ax.plot(-4, 0, '')
```
:::
::::
::::

## Geometric Representation

:::{style="font-size: .8em"}
Equivalently, we can represent a vector by drawing an arrow from the origin the origin to the point. 
:::
:::{.center-text}
```{python}
ax = ut.plotSetup(size=(8,4))
ut.centerAxes(ax)
ax.arrow(0, 0, -2, -1, head_width=0.2, head_length=0.2, length_includes_head = True)
ax.arrow(0, 0, 2, 2, head_width=0.2, head_length=0.2, length_includes_head = True)
ax.arrow(0, 0, 3, -1, head_width=0.2, head_length=0.2, length_includes_head = True)
ax.plot(0, -2, '')
ax.plot(-4, 0, '')
ax.plot(0, 2, '')
ax.plot(4 ,0, '')
```
:::

## Vector Manipulations

```{python}
#| echo: true
import numpy as np

u = np.array([[7],[4]])
v = np.array([[4],[7]])

print(np.array_equal(u,v))
```

```{python}
#| echo: true
print(np.array_equal(v,v))
```
:::{.center-text style="font-size: .8em"}
$\bf{u} = \begin{bmatrix}7 \\ 4\end{bmatrix}$ does _not_ equal $\bf{v} = \begin{bmatrix}4 \\ 7\end{bmatrix}.$
:::
:::{.fragment style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p>Two vectors of the same size are <b>equal</b>, if and only if their corresponding entries are equal.
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::

## Vector Manipulations
:::::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p><b>Multiplying</b> a vector<b> by a scalar</b> is accomplished by multiplying each entry by the scalar.
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::{.fragment}

For example:
$$
2 \begin{bmatrix} 7 \\ 4 \end{bmatrix} = \begin{bmatrix} 14 \\ 8 \end{bmatrix}.
$$

:::
:::::

::::{.fragment}
:::{style="font-size: .8em"}
We can use `Python` to compute scalar-vector multiplication.
:::

:::{style="font-size: 1.2em"}
```{python}
#| echo: true
print(2 * u)
```
:::
::::

## Vector Manipulations
:::::{style="font-size: .8em"}

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p>If two vectors are the same size, then their <b>sum</b> is another vector whose entries are the corresponding sums.
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
<!-- questionable fragment -->
::::{.fragment}
For example:

$$
\left[\begin{array}{r}1\\-2\end{array}\right] + \left[\begin{array}{c}2\\-5\end{array}\right] = \left[\begin{array}{r}1 + 2\\-2 - 5\end{array}\right] = \left[\begin{array}{c}3\\-7\end{array}\right].
$$

::::
:::::

:::{.fragment style="font-size: 1.1em"}
```{python}
#| echo: true
s = np.array([[1],[-2]])
t = np.array([[2],[-5]])

print(s + t)
```
:::


## Vector Manipulations {.scrollable}

::::{style="font-size: .8em"}
Note that _vectors of different sizes cannot be compared or added._

:::{.fragment}
For example, if ${\bf s} = \left[\begin{array}{r}1\\-2\end{array}\right] \in \mathbb{R}^2$ and ${\bf r} = \left[\begin{array}{r}-3\\4\\-5\end{array}\right] \in \mathbb{R}^3$:

* we cannot ask whether ${\bf s} = {\bf r}$, and 
* ${\bf s} + {\bf r}$ is undefined.
:::
::::
::::{.fragment}
:::{style="font-size: .7em"}
If you try to perform these operations in `Python`, it will return an error message.
:::
```{python}
#| echo: true
#| error: true
import numpy as np

r = np.array([[-3],[4],[-5]])
print(s + r)
```
::::

## Vector Addition
:::{.fragment style="font-size: .8em"}
A geometric interpretation of vector sum is as a _parallelogram._ <br>
:::
::::{.fragment}
:::{style="font-size: .8em"}
If ${\bf u}$ and ${\bf v}$ in $\mathbb{R}^2$ are represented as points in the plane, then ${\bf u} + {\bf v}$ corresponds to the fourth vertex of the parallelogram whose other vertices are ${\bf u}, {\bf0},$ and ${\bf v}$.
:::
:::{.center-text}
```{python}
ax = ut.plotSetup(size=(10,5))
ut.centerAxes(ax)
ax.arrow(0, 0, 1, 2, head_width=0.2, head_length=0.2, length_includes_head = True)
ax.arrow(0, 0, 4, 1, head_width=0.2, head_length=0.2, length_includes_head = True)
ax.plot([4,5],[1,3],'--')
ax.plot([1,5],[2,3],'--')
ax.text(5.25,3.25,r'${\bf u}$+${\bf v}$',size=12)
ax.text(1.5,2.5,r'${\bf u}$',size=12)
ax.text(4.75,1,r'${\bf v}$',size=12)
ut.plotPoint(ax,5,3)
ax.plot(0,0,'')
```
:::
::::

## Scalar Multiplication
:::{.fragment style="font-size: .8em"}
Multiplying vector $\bf{v}$ by a scalar $c$ corresponds to _lengthening_ $\bf{v}$ by a factor of $c$. <br>
:::

<div style="margin-bottom: 0.5em;"> </div> 

:::{.fragment style="font-size: .8em"}
So _$2\bf v$_ is _twice_ as long as $\bf v$.  
:::

:::{.fragment style="font-size: .8em"}
Multiplying by a _negative_ value _reverses_ the "direction" of $\bf v$.

:::

:::{.fragment .center-text}
```{python}
ax = ut.plotSetup(size=(10,5))
ut.centerAxes(ax)
factors = [-1.5, 0, 1, 2]
ftext = ['-3/2', '0', '', '2']
for f in factors:
    ut.plotPoint(ax, 3.0*f, f)
ax.arrow(0,0,6,2,head_width=0.2, head_length=0.2, length_includes_head = True)
ax.arrow(0,0,-4.5,-1.5,head_width=0.2, head_length=0.2,length_includes_head = True)
for f in range(len(factors)):
    ax.text(3.0*factors[f]+0.2, factors[f]-0.5, r'{}$\bf v$'.format(ftext[f]), size=20)
print('')
```
:::

## Scalar Multiplication

:::{.center-text style="font-size: .8em"}
Multiplying a _vector_ by a _scalar_
:::

```{python}
import plotly.graph_objects as go
import numpy as np

# Function to create edges of a cube
def cube_edges(origin, size):
    x0, y0, z0 = origin
    return [
        # bottom face
        [(x0, y0, z0), (x0+size, y0, z0)],
        [(x0, y0+size, z0), (x0+size, y0+size, z0)],
        [(x0, y0, z0), (x0, y0+size, z0)],
        [(x0+size, y0, z0), (x0+size, y0+size, z0)],

        # top face
        [(x0, y0, z0+size), (x0+size, y0, z0+size)],
        [(x0, y0+size, z0+size), (x0+size, y0+size, z0+size)],
        [(x0, y0, z0+size), (x0, y0+size, z0+size)],
        [(x0+size, y0, z0+size), (x0+size, y0+size, z0+size)],

        # vertical edges
        [(x0, y0, z0), (x0, y0, z0+size)],
        [(x0+size, y0, z0), (x0+size, y0, z0+size)],
        [(x0, y0+size, z0), (x0, y0+size, z0+size)],
        [(x0+size, y0+size, z0), (x0+size, y0+size, z0+size)]
    ]

# Create a 3D plot with two cubes and a line
fig = go.Figure()

# Add inner and outer cubes
for edge in cube_edges((0,0,0), 1.0):
    fig.add_trace(go.Scatter3d(
        x=[edge[0][0], edge[1][0]],
        y=[edge[0][1], edge[1][1]],
        z=[edge[0][2], edge[1][2]],
        mode='lines',
        line=dict(color='blue'),
        showlegend=False
    ))

for edge in cube_edges((0,0,0), 2.0):
    fig.add_trace(go.Scatter3d(
        x=[edge[0][0], edge[1][0]],
        y=[edge[0][1], edge[1][1]],
        z=[edge[0][2], edge[1][2]],
        mode='lines',
        line=dict(color='blue'),
        showlegend=False
    ))

# Vector line from (0,0,0) to (3,3,3)
# Vector line from (0,0,0) to (3,3,3)
fig.add_trace(go.Scatter3d(
    x=[0,3], y=[0,3], z=[0,3],
    mode='lines',
    line=dict(color='red', dash='dot'),
    showlegend=False
))

# Add red dot at corner of first box (0,0,0)
fig.add_trace(go.Scatter3d(
    x=[1], y=[1], z=[1],
    mode='markers+text',
    marker=dict(color='red', size=5),
    text=['v'],
    textposition='top center',
    showlegend=False
))

# Add red dot at corner of second box (2,2,2)
fig.add_trace(go.Scatter3d(
    x=[2], y=[2], z=[2],
    mode='markers+text',
    marker=dict(color='red', size=5),
    text=['2v'],
    textposition='top center',
    showlegend=False
))

# Set up axes and initial camera position
fig.update_layout(
    title_text='example',  # Add a title
    scene=dict(
        xaxis=dict(range=[0,3], title='εX'),
        yaxis=dict(range=[0,3], title='X2'),
        zaxis=dict(range=[0,3], title='τX'),
        camera=dict(eye=dict(x=1.5, y=-.8, z=.8))  # Adjust these values as needed
    ),
    margin=dict(l=0, r=0, b=0, t=0)
)


fig.show()
```

## Linear Combinations

:::::{style="font-size: .8em"}
Applying vector addition and scalar multiplication to vectors produces their linear combination.
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p>Let \( \bf{v}_1, \bf{v}_2, \dots, \bf{v}_p \) be vectors in \( \mathbb{R}^n \).
        Let \( c_1, c_2, \dots, c_p \) be scalars. Then a <b>linear combination</b> of \( \bf{v}_1, \bf{v}_2, \dots, \bf{v}_p \) is given by 
        \( \bf{y} = c_1\bf{v}_1 + \dots + c_p\bf{v}_p\).
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::{.fragment}
The $c_i$ values are called __weights__.   Weights can be any real number, including zero.  So some examples of linear combinations are:
:::
::::{.fragment .center-text}
$3{\bf v_1} + {\bf v_2}$,&emsp;&emsp;$(1 / 2){\bf v_1} = (1 / 2){\bf v_1} + 0{\bf v_2}$,&emsp;&emsp; and ${\bf 0} = 0{\bf v_1} + 0{\bf v_2}$

::::
:::::

## Linear Combinations
::::{style="font-size: .8em"}
Here is what a linear combination looks like geometrically. Suppose that 

::::{.center-text}
$\mathbf{u} = \begin{bmatrix} 2 \\ 1 \end{bmatrix}$ and $\mathbf{v} = \begin{bmatrix} -1 \\ 1 \end{bmatrix}$.
::::


Then, the linear combination $c \mathbf{u} + d \mathbf{v}$ corresponds to a walk in the $\mathbf{u}$ direction followed by a walk in the $\mathbf{v}$ direction.

:::{.fragment}
We can use this idea to determine geometrically the locations of the following vectors.

$$
\begin{align*}
{\bf w} &= 2{\bf u} + {\bf v}\\
{\bf p} &= -{\bf u} - {\bf v}\\
{\bf q} &= -{\bf u} + 3{\bf v}
\end{align*}
$$
:::
:::


## Linear Combinations

:::{.center-text}
```{python}
ax = ut.plotSetup(-6, 6, -4, 4, size=(10,5))
ut.centerAxes(ax)
ax.set_xticks([])
ax.set_yticks([])
factors = [-3, -2, -1, 0, 1, 2, 3]
u = [2, 1]
v = [-1, 1]
for f in factors:
    ut.plotPoint(ax, f*u[0], f*u[1])
    ax.text(f*u[0]+0.25,f*u[1]-0.25,r'{}$\bf u$'.format(f),size=12)
    ut.plotPoint(ax, f*v[0], f*v[1])
    ax.text(f*v[0]+0.25,f*v[1]-0.25,r'{}$\bf v$'.format(f),size=12)
ut.plotPoint(ax,2*u[0]+v[0],2*u[1]+v[1],'g')
ut.plotPoint(ax,-u[0]-v[0],-u[1]-v[1],'b')
ut.plotPoint(ax,-u[0]+3*v[0],-u[1]+3*v[1],'y')
```
:::

## Linear Combinations

:::{.center-text}
```{python}
ax = ut.plotSetup(-6, 6, -4, 4, size=(10,5))
ut.centerAxes(ax)
ax.set_xticks([])
ax.set_yticks([])
factors = [-3, -2, -1, 0, 1, 2, 3]
u = [2, 1]
v = [-1, 1]
for f in factors:
    ut.plotPoint(ax, f*u[0], f*u[1])
    ax.text(f*u[0]+0.25,f*u[1]-0.25,r'{}$\bf u$'.format(f),size=12)
    ut.plotPoint(ax, f*v[0], f*v[1])
    ax.text(f*v[0]+0.25,f*v[1]-0.25,r'{}$\bf v$'.format(f),size=12)
ax.plot([factors[0]*u[0],factors[-1]*u[0]],[factors[0]*u[1],factors[-1]*u[1]],'b--')
ax.plot([factors[0]*v[0],factors[-1]*v[0]],[factors[0]*v[1],factors[-1]*v[1]],'b--')
ut.plotPoint(ax,2*u[0]+v[0],2*u[1]+v[1],'g')
ut.plotPoint(ax,-u[0]-v[0],-u[1]-v[1],'b')
ut.plotPoint(ax,-u[0]+3*v[0],-u[1]+3*v[1],'y')
```
:::

## Linear Combinations
::::{style="font-size: .8em"}
Consider $\bf{u}$ ,$\bf{v}$ and $\bf{w}$ that are distinct vectors in $\mathbb{R}^3$.

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>What is the picture of all linear combinations of \( \bf{u}\)?
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```

:::{.fragment}
_If_ $\bf{u}$ is the _zero vector_, $\bf{u}= \tiny \begin{bmatrix} 0 \\ 0 \\ 0 \end{bmatrix}$, then every linear combination of $\bf{u}$ would be zero.
:::
:::{.fragment}
_If_ $\bf{u}$ is a _nonzero vector_, its linear combination fills a _line through_ $\tiny \begin{bmatrix} 0 \\ 0 \\ 0 \end{bmatrix}.$
:::
::::

## Linear Combinations

::::{style="font-size: .8em"}
Consider $\bf{u}$ ,$\bf{v}$ and $\bf{w}$ that are distinct vectors in $\mathbb{R}^3$.

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>What is the picture of all linear combinations of \( \bf{u}\) and \( \bf{v}\)?
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
<!-- Note, center-text lowers font size by .8em -->
:::{.fragment}
Assuming that $\boldsymbol{\bf{u}}$ and $\boldsymbol{\bf{v}}$ are nonzero vectors, their linear combinations, $c\boldsymbol{\bf{u}} + d\boldsymbol{\bf{v}}$, fill a plane through $\tiny \begin{bmatrix} 0 \\ 0 \\ 0 \end{bmatrix}.$
:::
:::{.fragment}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>What is the picture of all linear combinations of \(\mathbf{u}\), \( \mathbf{v}\) and \( \mathbf{w}\)?
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::

:::{.fragment}
The linear combinations of $\boldsymbol{\bf{u}}$, $\boldsymbol{\bf{v}}$, and $\boldsymbol{\bf{w}}$, $c\boldsymbol{\bf{u}} + d\boldsymbol{\bf{v}} +e\boldsymbol{\bf{w}}$, fill _three-dimensional space_ $\mathbb{R}^3.$
:::
::::

## Linear Combinations
<!-- Good fragmentation? -->
::::{style="font-size: .8em"}

Consider the linear combinations of $\mathbf{v} = \tiny \begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}$ and $\mathbf{w} = \tiny \begin{bmatrix} 0 \\ 1 \\ 1 \end{bmatrix}$. <br> They fill a plane in $\mathbb{R}^3$.

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>Describe that plane.
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```

:::{.fragment}
The plane of $\mathbf{v}$ and $\mathbf{w}$ contains all combinations $c\mathbf{v} + d\mathbf{w}$ with any $c \in \mathbb{R}$ and $d \in \mathbb{R}$:

$$
c\mathbf{v} + d \mathbf{w} =  c{\tiny \begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}} +  d{\tiny \begin{bmatrix} 0 \\ 1 \\ 1 \end{bmatrix}} = \tiny \begin{bmatrix} c \\ c + d \\ d \end{bmatrix}.
$$
:::
::::

## Linear Combinations

::::{style="font-size: .8em"}
Consider the linear combinations of $\mathbf{v} = {\tiny\begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}}$ and $\mathbf{w} = {\tiny\begin{bmatrix} 0 \\ 1 \\ 1 \end{bmatrix}}$. <br>They fill a plane in $\mathbb{R}^3$.

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>Find four vectors in that plane.
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```

:::{.fragment .center-text style="font-size: 1em"}
For example, ${\tiny\begin{bmatrix} 0 \\ 0 \\ 0 \end{bmatrix}},\space{\tiny\begin{bmatrix} 2 \\ 3 \\ 1 \end{bmatrix}},\space {\tiny\begin{bmatrix} 5 \\ 7 \\ 2 \end{bmatrix}}$, and ${\tiny\begin{bmatrix} \pi \\ 2\pi \\ \pi \end{bmatrix}}$ are all in the plane.
:::
::::

## Linear Combinations

::::{style="font-size: .8em"}
Consider the linear combinations of $\bar{v} = {\tiny\begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}}$ and $\bar{w} = {\tiny\begin{bmatrix} 0 \\ 1 \\ 1 \end{bmatrix}}$. <br>They fill a plane in $\mathbb{R}^3$.

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>Find a vector that is not on the plane.
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::{.fragment}
:::{style="font-size: 1em"}
Like most vectors, ${\tiny\begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix}}$ is not on the plane.
:::
:::{style="font-size: .8em"}
_**Note:**_ $2 + 1 + 3$ is the reason why ${\tiny\begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix}}$ is not on the plane.
:::
:::
::::
## Linear Combinations

::::{style="font-size: .8em"}
Consider $\mathbf{v} = {\tiny\begin{bmatrix} 2 \\ -1 \end{bmatrix}}, \mathbf{w} = {\tiny\begin{bmatrix} -1 \\ 2 \end{bmatrix}}, \text{ and } \mathbf{b} = {\tiny\begin{bmatrix} 1 \\ 0 \end{bmatrix}}$.

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>Find two equations for \(c\) and \(d\) so that \(c\mathbf{v} + d\mathbf{w} \) equals \(\mathbf{b}\).
        </p>
    </div>
    """

html_content = generate_html()
display(HTML(html_content))
```
:::{.fragment}
We find the equasions as follows:

$$
\begin{aligned}
c\mathbf{v} + d\mathbf{w} = \mathbf{b} &\iff c{\tiny\begin{bmatrix} 2 \\ -1 \end{bmatrix}} + d{\tiny\begin{bmatrix} -1 \\ 2 \end{bmatrix}} = {\tiny\begin{bmatrix} 1 \\ 0 \end{bmatrix}} \\
&\iff
\begin{cases}
2c - d = 1 \\
-c + 2d = 0
\end{cases}
\end{aligned}
$$



:::
::::
## Key Ideas

:::{.incremental style="font-size: .8em"}
- A vector can be viewed as a list of numbers, an arrow from the origin, a point in the plane, or a NumPy array.
- A vector in $d$-dimensional space $\mathbb{R}^d$ has $d$ entries.
- Vector addition and scalar multiplication are performed entrywise.
- Take all linear combinations of three-dimensional vectors $\mathbf{u}$, $\mathbf{v}$, and $\mathbf{w}$. These combinations typically form a line, a plane, or the whole space $\mathbb{R}^3$.
:::